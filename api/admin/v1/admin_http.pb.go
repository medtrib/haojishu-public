// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v3.19.4
// source: admin/v1/admin.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAdminAdminStatus = "/api.admin.v1.Admin/AdminStatus"
const OperationAdminCreateAdmin = "/api.admin.v1.Admin/CreateAdmin"
const OperationAdminDeleteAdmin = "/api.admin.v1.Admin/DeleteAdmin"
const OperationAdminGetAdmin = "/api.admin.v1.Admin/GetAdmin"
const OperationAdminListAdmin = "/api.admin.v1.Admin/ListAdmin"
const OperationAdminRecoverAdmin = "/api.admin.v1.Admin/RecoverAdmin"
const OperationAdminUpdateAdmin = "/api.admin.v1.Admin/UpdateAdmin"
const OperationAdminVerifyAdminPasswd = "/api.admin.v1.Admin/VerifyAdminPasswd"

type AdminHTTPServer interface {
	// AdminStatus 管理员状态
	AdminStatus(context.Context, *AdminStatusReq) (*RepStatus, error)
	// CreateAdmin 创建管理员
	CreateAdmin(context.Context, *CreateAdminReq) (*AdminInfoRep, error)
	// DeleteAdmin 删除管理员
	DeleteAdmin(context.Context, *DeleteAdminReq) (*RepStatus, error)
	// GetAdmin 获取管理员详情
	GetAdmin(context.Context, *GetAdminReq) (*AdminInfoRep, error)
	// ListAdmin 获取管理员列表
	ListAdmin(context.Context, *ListAdminReq) (*ListAdminRep, error)
	// RecoverAdmin 恢复管理员
	RecoverAdmin(context.Context, *RecoverAdminReq) (*RepStatus, error)
	// UpdateAdmin 编辑管理员
	UpdateAdmin(context.Context, *UpdateAdminReq) (*RepStatus, error)
	// VerifyAdminPasswd 验证管理员密码
	VerifyAdminPasswd(context.Context, *VerifyAdminPasswdReq) (*RepStatus, error)
}

func RegisterAdminHTTPServer(s *http.Server, srv AdminHTTPServer) {
	r := s.Route("/")
	r.POST("/admin/v1/CreateAdmin", _Admin_CreateAdmin0_HTTP_Handler(srv))
	r.PUT("/admin/v1/UpdateAdmin", _Admin_UpdateAdmin0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/DeleteAdmin", _Admin_DeleteAdmin0_HTTP_Handler(srv))
	r.PATCH("/admin/v1/RecoverAdmin", _Admin_RecoverAdmin0_HTTP_Handler(srv))
	r.PATCH("/admin/v1/AdminStatus", _Admin_AdminStatus0_HTTP_Handler(srv))
	r.POST("/admin/v1/VerifyAdminPasswd", _Admin_VerifyAdminPasswd0_HTTP_Handler(srv))
	r.GET("/admin/v1/GetAdmin", _Admin_GetAdmin0_HTTP_Handler(srv))
	r.GET("/admin/v1/ListAdmin", _Admin_ListAdmin0_HTTP_Handler(srv))
}

func _Admin_CreateAdmin0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAdminReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminCreateAdmin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAdmin(ctx, req.(*CreateAdminReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminInfoRep)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateAdmin0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAdminReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminUpdateAdmin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAdmin(ctx, req.(*UpdateAdminReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RepStatus)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteAdmin0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAdminReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminDeleteAdmin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAdmin(ctx, req.(*DeleteAdminReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RepStatus)
		return ctx.Result(200, reply)
	}
}

func _Admin_RecoverAdmin0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RecoverAdminReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminRecoverAdmin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RecoverAdmin(ctx, req.(*RecoverAdminReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RepStatus)
		return ctx.Result(200, reply)
	}
}

func _Admin_AdminStatus0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminStatusReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminAdminStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminStatus(ctx, req.(*AdminStatusReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RepStatus)
		return ctx.Result(200, reply)
	}
}

func _Admin_VerifyAdminPasswd0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VerifyAdminPasswdReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminVerifyAdminPasswd)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.VerifyAdminPasswd(ctx, req.(*VerifyAdminPasswdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RepStatus)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetAdmin0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAdminReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetAdmin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAdmin(ctx, req.(*GetAdminReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminInfoRep)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListAdmin0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAdminReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminListAdmin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAdmin(ctx, req.(*ListAdminReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAdminRep)
		return ctx.Result(200, reply)
	}
}

type AdminHTTPClient interface {
	AdminStatus(ctx context.Context, req *AdminStatusReq, opts ...http.CallOption) (rsp *RepStatus, err error)
	CreateAdmin(ctx context.Context, req *CreateAdminReq, opts ...http.CallOption) (rsp *AdminInfoRep, err error)
	DeleteAdmin(ctx context.Context, req *DeleteAdminReq, opts ...http.CallOption) (rsp *RepStatus, err error)
	GetAdmin(ctx context.Context, req *GetAdminReq, opts ...http.CallOption) (rsp *AdminInfoRep, err error)
	ListAdmin(ctx context.Context, req *ListAdminReq, opts ...http.CallOption) (rsp *ListAdminRep, err error)
	RecoverAdmin(ctx context.Context, req *RecoverAdminReq, opts ...http.CallOption) (rsp *RepStatus, err error)
	UpdateAdmin(ctx context.Context, req *UpdateAdminReq, opts ...http.CallOption) (rsp *RepStatus, err error)
	VerifyAdminPasswd(ctx context.Context, req *VerifyAdminPasswdReq, opts ...http.CallOption) (rsp *RepStatus, err error)
}

type AdminHTTPClientImpl struct {
	cc *http.Client
}

func NewAdminHTTPClient(client *http.Client) AdminHTTPClient {
	return &AdminHTTPClientImpl{client}
}

func (c *AdminHTTPClientImpl) AdminStatus(ctx context.Context, in *AdminStatusReq, opts ...http.CallOption) (*RepStatus, error) {
	var out RepStatus
	pattern := "/admin/v1/AdminStatus"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminAdminStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) CreateAdmin(ctx context.Context, in *CreateAdminReq, opts ...http.CallOption) (*AdminInfoRep, error) {
	var out AdminInfoRep
	pattern := "/admin/v1/CreateAdmin"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminCreateAdmin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteAdmin(ctx context.Context, in *DeleteAdminReq, opts ...http.CallOption) (*RepStatus, error) {
	var out RepStatus
	pattern := "/admin/v1/DeleteAdmin"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminDeleteAdmin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetAdmin(ctx context.Context, in *GetAdminReq, opts ...http.CallOption) (*AdminInfoRep, error) {
	var out AdminInfoRep
	pattern := "/admin/v1/GetAdmin"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetAdmin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListAdmin(ctx context.Context, in *ListAdminReq, opts ...http.CallOption) (*ListAdminRep, error) {
	var out ListAdminRep
	pattern := "/admin/v1/ListAdmin"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminListAdmin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) RecoverAdmin(ctx context.Context, in *RecoverAdminReq, opts ...http.CallOption) (*RepStatus, error) {
	var out RepStatus
	pattern := "/admin/v1/RecoverAdmin"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminRecoverAdmin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateAdmin(ctx context.Context, in *UpdateAdminReq, opts ...http.CallOption) (*RepStatus, error) {
	var out RepStatus
	pattern := "/admin/v1/UpdateAdmin"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminUpdateAdmin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) VerifyAdminPasswd(ctx context.Context, in *VerifyAdminPasswdReq, opts ...http.CallOption) (*RepStatus, error) {
	var out RepStatus
	pattern := "/admin/v1/VerifyAdminPasswd"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminVerifyAdminPasswd))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
