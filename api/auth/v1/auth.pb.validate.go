// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/auth/v1/auth.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddRoleReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddRoleReqMultiError, or
// nil if none found.
func (m *AddRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := AddRoleReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddRoleReqMultiError(errors)
	}

	return nil
}

// AddRoleReqMultiError is an error wrapping multiple validation errors
// returned by AddRoleReq.ValidateAll() if the designated constraints aren't met.
type AddRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRoleReqMultiError) AllErrors() []error { return m }

// AddRoleReqValidationError is the validation error returned by
// AddRoleReq.Validate if the designated constraints aren't met.
type AddRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRoleReqValidationError) ErrorName() string { return "AddRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e AddRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRoleReqValidationError{}

// Validate checks the field values on EditRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EditRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EditRoleReqMultiError, or
// nil if none found.
func (m *EditRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EditRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRoleId() <= 0 {
		err := EditRoleReqValidationError{
			field:  "RoleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetRoleName()); l < 1 || l > 255 {
		err := EditRoleReqValidationError{
			field:  "RoleName",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EditRoleReqMultiError(errors)
	}

	return nil
}

// EditRoleReqMultiError is an error wrapping multiple validation errors
// returned by EditRoleReq.ValidateAll() if the designated constraints aren't met.
type EditRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditRoleReqMultiError) AllErrors() []error { return m }

// EditRoleReqValidationError is the validation error returned by
// EditRoleReq.Validate if the designated constraints aren't met.
type EditRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditRoleReqValidationError) ErrorName() string { return "EditRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e EditRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditRoleReqValidationError{}

// Validate checks the field values on RepStatus with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RepStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RepStatusMultiError, or nil
// if none found.
func (m *RepStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *RepStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return RepStatusMultiError(errors)
	}

	return nil
}

// RepStatusMultiError is an error wrapping multiple validation errors returned
// by RepStatus.ValidateAll() if the designated constraints aren't met.
type RepStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RepStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RepStatusMultiError) AllErrors() []error { return m }

// RepStatusValidationError is the validation error returned by
// RepStatus.Validate if the designated constraints aren't met.
type RepStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepStatusValidationError) ErrorName() string { return "RepStatusValidationError" }

// Error satisfies the builtin error interface
func (e RepStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepStatusValidationError{}

// Validate checks the field values on DelRoleReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelRoleReqMultiError, or
// nil if none found.
func (m *DelRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRoleId() <= 0 {
		err := DelRoleReqValidationError{
			field:  "RoleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelRoleReqMultiError(errors)
	}

	return nil
}

// DelRoleReqMultiError is an error wrapping multiple validation errors
// returned by DelRoleReq.ValidateAll() if the designated constraints aren't met.
type DelRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelRoleReqMultiError) AllErrors() []error { return m }

// DelRoleReqValidationError is the validation error returned by
// DelRoleReq.Validate if the designated constraints aren't met.
type DelRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelRoleReqValidationError) ErrorName() string { return "DelRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e DelRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelRoleReqValidationError{}

// Validate checks the field values on FullRoleListRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FullRoleListRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FullRoleListRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FullRoleListRepMultiError, or nil if none found.
func (m *FullRoleListRep) ValidateAll() error {
	return m.validate(true)
}

func (m *FullRoleListRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FullRoleListRepValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FullRoleListRepValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FullRoleListRepValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FullRoleListRepMultiError(errors)
	}

	return nil
}

// FullRoleListRepMultiError is an error wrapping multiple validation errors
// returned by FullRoleListRep.ValidateAll() if the designated constraints
// aren't met.
type FullRoleListRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FullRoleListRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FullRoleListRepMultiError) AllErrors() []error { return m }

// FullRoleListRepValidationError is the validation error returned by
// FullRoleListRep.Validate if the designated constraints aren't met.
type FullRoleListRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FullRoleListRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FullRoleListRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FullRoleListRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FullRoleListRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FullRoleListRepValidationError) ErrorName() string { return "FullRoleListRepValidationError" }

// Error satisfies the builtin error interface
func (e FullRoleListRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFullRoleListRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FullRoleListRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FullRoleListRepValidationError{}

// Validate checks the field values on PageRoleListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PageRoleListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageRoleListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageRoleListReqMultiError, or nil if none found.
func (m *PageRoleListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PageRoleListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := PageRoleListReqValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val >= 50 {
		err := PageRoleListReqValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetRoleName()); l < 1 || l > 255 {
		err := PageRoleListReqValidationError{
			field:  "RoleName",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PageRoleListReqMultiError(errors)
	}

	return nil
}

// PageRoleListReqMultiError is an error wrapping multiple validation errors
// returned by PageRoleListReq.ValidateAll() if the designated constraints
// aren't met.
type PageRoleListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageRoleListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageRoleListReqMultiError) AllErrors() []error { return m }

// PageRoleListReqValidationError is the validation error returned by
// PageRoleListReq.Validate if the designated constraints aren't met.
type PageRoleListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageRoleListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageRoleListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageRoleListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageRoleListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageRoleListReqValidationError) ErrorName() string { return "PageRoleListReqValidationError" }

// Error satisfies the builtin error interface
func (e PageRoleListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageRoleListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageRoleListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageRoleListReqValidationError{}

// Validate checks the field values on PageRoleListRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PageRoleListRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageRoleListRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageRoleListRepMultiError, or nil if none found.
func (m *PageRoleListRep) ValidateAll() error {
	return m.validate(true)
}

func (m *PageRoleListRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PageRoleListRepValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PageRoleListRepValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageRoleListRepValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PageRoleListRepMultiError(errors)
	}

	return nil
}

// PageRoleListRepMultiError is an error wrapping multiple validation errors
// returned by PageRoleListRep.ValidateAll() if the designated constraints
// aren't met.
type PageRoleListRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageRoleListRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageRoleListRepMultiError) AllErrors() []error { return m }

// PageRoleListRepValidationError is the validation error returned by
// PageRoleListRep.Validate if the designated constraints aren't met.
type PageRoleListRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageRoleListRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageRoleListRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageRoleListRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageRoleListRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageRoleListRepValidationError) ErrorName() string { return "PageRoleListRepValidationError" }

// Error satisfies the builtin error interface
func (e PageRoleListRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageRoleListRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageRoleListRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageRoleListRepValidationError{}

// Validate checks the field values on Role with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Role) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Role with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RoleMultiError, or nil if none found.
func (m *Role) ValidateAll() error {
	return m.validate(true)
}

func (m *Role) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for Name

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return RoleMultiError(errors)
	}

	return nil
}

// RoleMultiError is an error wrapping multiple validation errors returned by
// Role.ValidateAll() if the designated constraints aren't met.
type RoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleMultiError) AllErrors() []error { return m }

// RoleValidationError is the validation error returned by Role.Validate if the
// designated constraints aren't met.
type RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleValidationError) ErrorName() string { return "RoleValidationError" }

// Error satisfies the builtin error interface
func (e RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleValidationError{}

// Validate checks the field values on SetUserForRoleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetUserForRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserForRoleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUserForRoleReqMultiError, or nil if none found.
func (m *SetUserForRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserForRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUsername()); l < 1 || l > 255 {
		err := SetUserForRoleReqValidationError{
			field:  "Username",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRoles()) < 1 {
		err := SetUserForRoleReqValidationError{
			field:  "Roles",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetUserForRoleReqMultiError(errors)
	}

	return nil
}

// SetUserForRoleReqMultiError is an error wrapping multiple validation errors
// returned by SetUserForRoleReq.ValidateAll() if the designated constraints
// aren't met.
type SetUserForRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserForRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserForRoleReqMultiError) AllErrors() []error { return m }

// SetUserForRoleReqValidationError is the validation error returned by
// SetUserForRoleReq.Validate if the designated constraints aren't met.
type SetUserForRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserForRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserForRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserForRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserForRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserForRoleReqValidationError) ErrorName() string {
	return "SetUserForRoleReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetUserForRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserForRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserForRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserForRoleReqValidationError{}

// Validate checks the field values on GetRolesForUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRolesForUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRolesForUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRolesForUserReqMultiError, or nil if none found.
func (m *GetRolesForUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRolesForUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUsername()); l < 1 || l > 255 {
		err := GetRolesForUserReqValidationError{
			field:  "Username",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetRolesForUserReqMultiError(errors)
	}

	return nil
}

// GetRolesForUserReqMultiError is an error wrapping multiple validation errors
// returned by GetRolesForUserReq.ValidateAll() if the designated constraints
// aren't met.
type GetRolesForUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRolesForUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRolesForUserReqMultiError) AllErrors() []error { return m }

// GetRolesForUserReqValidationError is the validation error returned by
// GetRolesForUserReq.Validate if the designated constraints aren't met.
type GetRolesForUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRolesForUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRolesForUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRolesForUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRolesForUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRolesForUserReqValidationError) ErrorName() string {
	return "GetRolesForUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetRolesForUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRolesForUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRolesForUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRolesForUserReqValidationError{}

// Validate checks the field values on GetRolesForUserRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRolesForUserRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRolesForUserRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRolesForUserRepMultiError, or nil if none found.
func (m *GetRolesForUserRep) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRolesForUserRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetRolesForUserRepMultiError(errors)
	}

	return nil
}

// GetRolesForUserRepMultiError is an error wrapping multiple validation errors
// returned by GetRolesForUserRep.ValidateAll() if the designated constraints
// aren't met.
type GetRolesForUserRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRolesForUserRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRolesForUserRepMultiError) AllErrors() []error { return m }

// GetRolesForUserRepValidationError is the validation error returned by
// GetRolesForUserRep.Validate if the designated constraints aren't met.
type GetRolesForUserRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRolesForUserRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRolesForUserRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRolesForUserRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRolesForUserRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRolesForUserRepValidationError) ErrorName() string {
	return "GetRolesForUserRepValidationError"
}

// Error satisfies the builtin error interface
func (e GetRolesForUserRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRolesForUserRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRolesForUserRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRolesForUserRepValidationError{}

// Validate checks the field values on GetUsersForRoleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsersForRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersForRoleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersForRoleReqMultiError, or nil if none found.
func (m *GetUsersForRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersForRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetRole()); l < 1 || l > 255 {
		err := GetUsersForRoleReqValidationError{
			field:  "Role",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUsersForRoleReqMultiError(errors)
	}

	return nil
}

// GetUsersForRoleReqMultiError is an error wrapping multiple validation errors
// returned by GetUsersForRoleReq.ValidateAll() if the designated constraints
// aren't met.
type GetUsersForRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersForRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersForRoleReqMultiError) AllErrors() []error { return m }

// GetUsersForRoleReqValidationError is the validation error returned by
// GetUsersForRoleReq.Validate if the designated constraints aren't met.
type GetUsersForRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersForRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersForRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersForRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersForRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersForRoleReqValidationError) ErrorName() string {
	return "GetUsersForRoleReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersForRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersForRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersForRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersForRoleReqValidationError{}

// Validate checks the field values on GetUsersForRoleRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsersForRoleRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersForRoleRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersForRoleRepMultiError, or nil if none found.
func (m *GetUsersForRoleRep) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersForRoleRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUsersForRoleRepMultiError(errors)
	}

	return nil
}

// GetUsersForRoleRepMultiError is an error wrapping multiple validation errors
// returned by GetUsersForRoleRep.ValidateAll() if the designated constraints
// aren't met.
type GetUsersForRoleRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersForRoleRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersForRoleRepMultiError) AllErrors() []error { return m }

// GetUsersForRoleRepValidationError is the validation error returned by
// GetUsersForRoleRep.Validate if the designated constraints aren't met.
type GetUsersForRoleRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersForRoleRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersForRoleRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersForRoleRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersForRoleRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersForRoleRepValidationError) ErrorName() string {
	return "GetUsersForRoleRepValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersForRoleRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersForRoleRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersForRoleRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersForRoleRepValidationError{}

// Validate checks the field values on DeleteRoleForUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleForUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleForUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleForUserReqMultiError, or nil if none found.
func (m *DeleteRoleForUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleForUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUsername()); l < 1 || l > 255 {
		err := DeleteRoleForUserReqValidationError{
			field:  "Username",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetRole()); l < 1 || l > 255 {
		err := DeleteRoleForUserReqValidationError{
			field:  "Role",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteRoleForUserReqMultiError(errors)
	}

	return nil
}

// DeleteRoleForUserReqMultiError is an error wrapping multiple validation
// errors returned by DeleteRoleForUserReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteRoleForUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleForUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleForUserReqMultiError) AllErrors() []error { return m }

// DeleteRoleForUserReqValidationError is the validation error returned by
// DeleteRoleForUserReq.Validate if the designated constraints aren't met.
type DeleteRoleForUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleForUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleForUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleForUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleForUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleForUserReqValidationError) ErrorName() string {
	return "DeleteRoleForUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleForUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleForUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleForUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleForUserReqValidationError{}

// Validate checks the field values on DeleteRolesForUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRolesForUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRolesForUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRolesForUserReqMultiError, or nil if none found.
func (m *DeleteRolesForUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRolesForUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUsername()); l < 1 || l > 255 {
		err := DeleteRolesForUserReqValidationError{
			field:  "Username",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteRolesForUserReqMultiError(errors)
	}

	return nil
}

// DeleteRolesForUserReqMultiError is an error wrapping multiple validation
// errors returned by DeleteRolesForUserReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteRolesForUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRolesForUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRolesForUserReqMultiError) AllErrors() []error { return m }

// DeleteRolesForUserReqValidationError is the validation error returned by
// DeleteRolesForUserReq.Validate if the designated constraints aren't met.
type DeleteRolesForUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRolesForUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRolesForUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRolesForUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRolesForUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRolesForUserReqValidationError) ErrorName() string {
	return "DeleteRolesForUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRolesForUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRolesForUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRolesForUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRolesForUserReqValidationError{}

// Validate checks the field values on GetRolePoliciesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRolePoliciesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRolePoliciesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRolePoliciesReqMultiError, or nil if none found.
func (m *GetRolePoliciesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRolePoliciesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetRole()); l < 1 || l > 255 {
		err := GetRolePoliciesReqValidationError{
			field:  "Role",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetRolePoliciesReqMultiError(errors)
	}

	return nil
}

// GetRolePoliciesReqMultiError is an error wrapping multiple validation errors
// returned by GetRolePoliciesReq.ValidateAll() if the designated constraints
// aren't met.
type GetRolePoliciesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRolePoliciesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRolePoliciesReqMultiError) AllErrors() []error { return m }

// GetRolePoliciesReqValidationError is the validation error returned by
// GetRolePoliciesReq.Validate if the designated constraints aren't met.
type GetRolePoliciesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRolePoliciesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRolePoliciesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRolePoliciesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRolePoliciesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRolePoliciesReqValidationError) ErrorName() string {
	return "GetRolePoliciesReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetRolePoliciesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRolePoliciesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRolePoliciesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRolePoliciesReqValidationError{}

// Validate checks the field values on GetRolePoliciesRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRolePoliciesRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRolePoliciesRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRolePoliciesRepMultiError, or nil if none found.
func (m *GetRolePoliciesRep) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRolePoliciesRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPolicyRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRolePoliciesRepValidationError{
						field:  fmt.Sprintf("PolicyRules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRolePoliciesRepValidationError{
						field:  fmt.Sprintf("PolicyRules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRolePoliciesRepValidationError{
					field:  fmt.Sprintf("PolicyRules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetRolePoliciesRepMultiError(errors)
	}

	return nil
}

// GetRolePoliciesRepMultiError is an error wrapping multiple validation errors
// returned by GetRolePoliciesRep.ValidateAll() if the designated constraints
// aren't met.
type GetRolePoliciesRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRolePoliciesRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRolePoliciesRepMultiError) AllErrors() []error { return m }

// GetRolePoliciesRepValidationError is the validation error returned by
// GetRolePoliciesRep.Validate if the designated constraints aren't met.
type GetRolePoliciesRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRolePoliciesRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRolePoliciesRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRolePoliciesRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRolePoliciesRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRolePoliciesRepValidationError) ErrorName() string {
	return "GetRolePoliciesRepValidationError"
}

// Error satisfies the builtin error interface
func (e GetRolePoliciesRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRolePoliciesRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRolePoliciesRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRolePoliciesRepValidationError{}

// Validate checks the field values on SetRolePoliciesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetRolePoliciesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetRolePoliciesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetRolePoliciesReqMultiError, or nil if none found.
func (m *SetRolePoliciesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetRolePoliciesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetRole()); l < 1 || l > 255 {
		err := SetRolePoliciesReqValidationError{
			field:  "Role",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPolicyRules()) < 1 {
		err := SetRolePoliciesReqValidationError{
			field:  "PolicyRules",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPolicyRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SetRolePoliciesReqValidationError{
						field:  fmt.Sprintf("PolicyRules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SetRolePoliciesReqValidationError{
						field:  fmt.Sprintf("PolicyRules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetRolePoliciesReqValidationError{
					field:  fmt.Sprintf("PolicyRules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SetRolePoliciesReqMultiError(errors)
	}

	return nil
}

// SetRolePoliciesReqMultiError is an error wrapping multiple validation errors
// returned by SetRolePoliciesReq.ValidateAll() if the designated constraints
// aren't met.
type SetRolePoliciesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetRolePoliciesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetRolePoliciesReqMultiError) AllErrors() []error { return m }

// SetRolePoliciesReqValidationError is the validation error returned by
// SetRolePoliciesReq.Validate if the designated constraints aren't met.
type SetRolePoliciesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetRolePoliciesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetRolePoliciesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetRolePoliciesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetRolePoliciesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetRolePoliciesReqValidationError) ErrorName() string {
	return "SetRolePoliciesReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetRolePoliciesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetRolePoliciesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetRolePoliciesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetRolePoliciesReqValidationError{}

// Validate checks the field values on PolicyRules with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PolicyRules) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicyRules with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PolicyRulesMultiError, or
// nil if none found.
func (m *PolicyRules) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicyRules) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for Method

	if len(errors) > 0 {
		return PolicyRulesMultiError(errors)
	}

	return nil
}

// PolicyRulesMultiError is an error wrapping multiple validation errors
// returned by PolicyRules.ValidateAll() if the designated constraints aren't met.
type PolicyRulesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyRulesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyRulesMultiError) AllErrors() []error { return m }

// PolicyRulesValidationError is the validation error returned by
// PolicyRules.Validate if the designated constraints aren't met.
type PolicyRulesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyRulesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyRulesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyRulesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyRulesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyRulesValidationError) ErrorName() string { return "PolicyRulesValidationError" }

// Error satisfies the builtin error interface
func (e PolicyRulesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyRules.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyRulesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyRulesValidationError{}

// Validate checks the field values on CheckAuthReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckAuthReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckAuthReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CheckAuthReqMultiError, or
// nil if none found.
func (m *CheckAuthReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckAuthReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Role

	// no validation rules for Url

	// no validation rules for Mod

	if len(errors) > 0 {
		return CheckAuthReqMultiError(errors)
	}

	return nil
}

// CheckAuthReqMultiError is an error wrapping multiple validation errors
// returned by CheckAuthReq.ValidateAll() if the designated constraints aren't met.
type CheckAuthReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckAuthReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckAuthReqMultiError) AllErrors() []error { return m }

// CheckAuthReqValidationError is the validation error returned by
// CheckAuthReq.Validate if the designated constraints aren't met.
type CheckAuthReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckAuthReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckAuthReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckAuthReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckAuthReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckAuthReqValidationError) ErrorName() string { return "CheckAuthReqValidationError" }

// Error satisfies the builtin error interface
func (e CheckAuthReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckAuthReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckAuthReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckAuthReqValidationError{}

// Validate checks the field values on CreateMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateMenuReqMultiError, or
// nil if none found.
func (m *CreateMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ParentId

	if l := utf8.RuneCountInString(m.GetPath()); l < 1 || l > 255 {
		err := CreateMenuReqValidationError{
			field:  "Path",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := CreateMenuReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Hidden

	if l := utf8.RuneCountInString(m.GetComponent()); l < 1 || l > 255 {
		err := CreateMenuReqValidationError{
			field:  "Component",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSort() <= 0 {
		err := CreateMenuReqValidationError{
			field:  "Sort",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 255 {
		err := CreateMenuReqValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetIcon()); l < 1 || l > 255 {
		err := CreateMenuReqValidationError{
			field:  "Icon",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetMenuBtns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateMenuReqValidationError{
						field:  fmt.Sprintf("MenuBtns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateMenuReqValidationError{
						field:  fmt.Sprintf("MenuBtns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateMenuReqValidationError{
					field:  fmt.Sprintf("MenuBtns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if l := utf8.RuneCountInString(m.GetParentIds()); l < 1 || l > 255 {
		err := CreateMenuReqValidationError{
			field:  "ParentIds",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateMenuReqMultiError(errors)
	}

	return nil
}

// CreateMenuReqMultiError is an error wrapping multiple validation errors
// returned by CreateMenuReq.ValidateAll() if the designated constraints
// aren't met.
type CreateMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMenuReqMultiError) AllErrors() []error { return m }

// CreateMenuReqValidationError is the validation error returned by
// CreateMenuReq.Validate if the designated constraints aren't met.
type CreateMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMenuReqValidationError) ErrorName() string { return "CreateMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMenuReqValidationError{}

// Validate checks the field values on MenuBtn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MenuBtn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MenuBtn with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MenuBtnMultiError, or nil if none found.
func (m *MenuBtn) ValidateAll() error {
	return m.validate(true)
}

func (m *MenuBtn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for MenuId

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Identifier

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return MenuBtnMultiError(errors)
	}

	return nil
}

// MenuBtnMultiError is an error wrapping multiple validation errors returned
// by MenuBtn.ValidateAll() if the designated constraints aren't met.
type MenuBtnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenuBtnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenuBtnMultiError) AllErrors() []error { return m }

// MenuBtnValidationError is the validation error returned by MenuBtn.Validate
// if the designated constraints aren't met.
type MenuBtnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuBtnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuBtnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuBtnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuBtnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuBtnValidationError) ErrorName() string { return "MenuBtnValidationError" }

// Error satisfies the builtin error interface
func (e MenuBtnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenuBtn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuBtnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuBtnValidationError{}

// Validate checks the field values on Menu with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Menu) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Menu with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MenuMultiError, or nil if none found.
func (m *Menu) ValidateAll() error {
	return m.validate(true)
}

func (m *Menu) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ParentId

	// no validation rules for Path

	// no validation rules for Name

	// no validation rules for Hidden

	// no validation rules for Component

	// no validation rules for Sort

	// no validation rules for Title

	// no validation rules for Icon

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MenuValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MenuValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MenuValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMenuBtns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MenuValidationError{
						field:  fmt.Sprintf("MenuBtns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MenuValidationError{
						field:  fmt.Sprintf("MenuBtns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MenuValidationError{
					field:  fmt.Sprintf("MenuBtns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ParentIds

	if len(errors) > 0 {
		return MenuMultiError(errors)
	}

	return nil
}

// MenuMultiError is an error wrapping multiple validation errors returned by
// Menu.ValidateAll() if the designated constraints aren't met.
type MenuMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenuMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenuMultiError) AllErrors() []error { return m }

// MenuValidationError is the validation error returned by Menu.Validate if the
// designated constraints aren't met.
type MenuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuValidationError) ErrorName() string { return "MenuValidationError" }

// Error satisfies the builtin error interface
func (e MenuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuValidationError{}

// Validate checks the field values on EditMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EditMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EditMenuReqMultiError, or
// nil if none found.
func (m *EditMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EditMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := EditMenuReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ParentId

	if l := utf8.RuneCountInString(m.GetPath()); l < 1 || l > 255 {
		err := EditMenuReqValidationError{
			field:  "Path",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := EditMenuReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Hidden

	if l := utf8.RuneCountInString(m.GetComponent()); l < 1 || l > 255 {
		err := EditMenuReqValidationError{
			field:  "Component",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSort() <= 0 {
		err := EditMenuReqValidationError{
			field:  "Sort",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 255 {
		err := EditMenuReqValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetIcon()); l < 1 || l > 255 {
		err := EditMenuReqValidationError{
			field:  "Icon",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetMenuBtns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EditMenuReqValidationError{
						field:  fmt.Sprintf("MenuBtns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EditMenuReqValidationError{
						field:  fmt.Sprintf("MenuBtns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EditMenuReqValidationError{
					field:  fmt.Sprintf("MenuBtns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if l := utf8.RuneCountInString(m.GetParentIds()); l < 1 || l > 255 {
		err := EditMenuReqValidationError{
			field:  "ParentIds",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EditMenuReqMultiError(errors)
	}

	return nil
}

// EditMenuReqMultiError is an error wrapping multiple validation errors
// returned by EditMenuReq.ValidateAll() if the designated constraints aren't met.
type EditMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditMenuReqMultiError) AllErrors() []error { return m }

// EditMenuReqValidationError is the validation error returned by
// EditMenuReq.Validate if the designated constraints aren't met.
type EditMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditMenuReqValidationError) ErrorName() string { return "EditMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e EditMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditMenuReqValidationError{}

// Validate checks the field values on IdReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IdReqMultiError, or nil if none found.
func (m *IdReq) ValidateAll() error {
	return m.validate(true)
}

func (m *IdReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return IdReqMultiError(errors)
	}

	return nil
}

// IdReqMultiError is an error wrapping multiple validation errors returned by
// IdReq.ValidateAll() if the designated constraints aren't met.
type IdReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdReqMultiError) AllErrors() []error { return m }

// IdReqValidationError is the validation error returned by IdReq.Validate if
// the designated constraints aren't met.
type IdReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdReqValidationError) ErrorName() string { return "IdReqValidationError" }

// Error satisfies the builtin error interface
func (e IdReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdReqValidationError{}

// Validate checks the field values on ListMenuRep with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListMenuRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMenuRep with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListMenuRepMultiError, or
// nil if none found.
func (m *ListMenuRep) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMenuRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMenuRepValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMenuRepValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMenuRepValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListMenuRepMultiError(errors)
	}

	return nil
}

// ListMenuRepMultiError is an error wrapping multiple validation errors
// returned by ListMenuRep.ValidateAll() if the designated constraints aren't met.
type ListMenuRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMenuRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMenuRepMultiError) AllErrors() []error { return m }

// ListMenuRepValidationError is the validation error returned by
// ListMenuRep.Validate if the designated constraints aren't met.
type ListMenuRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMenuRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMenuRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMenuRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMenuRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMenuRepValidationError) ErrorName() string { return "ListMenuRepValidationError" }

// Error satisfies the builtin error interface
func (e ListMenuRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMenuRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMenuRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMenuRepValidationError{}

// Validate checks the field values on CreateRoleMenuBtnReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleMenuBtnReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleMenuBtnReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleMenuBtnReqMultiError, or nil if none found.
func (m *CreateRoleMenuBtnReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleMenuBtnReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRoleId() <= 0 {
		err := CreateRoleMenuBtnReqValidationError{
			field:  "RoleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMenuId() <= 0 {
		err := CreateRoleMenuBtnReqValidationError{
			field:  "MenuId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetMenuBtnIds()) < 1 {
		err := CreateRoleMenuBtnReqValidationError{
			field:  "MenuBtnIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateRoleMenuBtnReqMultiError(errors)
	}

	return nil
}

// CreateRoleMenuBtnReqMultiError is an error wrapping multiple validation
// errors returned by CreateRoleMenuBtnReq.ValidateAll() if the designated
// constraints aren't met.
type CreateRoleMenuBtnReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleMenuBtnReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleMenuBtnReqMultiError) AllErrors() []error { return m }

// CreateRoleMenuBtnReqValidationError is the validation error returned by
// CreateRoleMenuBtnReq.Validate if the designated constraints aren't met.
type CreateRoleMenuBtnReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleMenuBtnReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleMenuBtnReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleMenuBtnReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleMenuBtnReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleMenuBtnReqValidationError) ErrorName() string {
	return "CreateRoleMenuBtnReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleMenuBtnReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleMenuBtnReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleMenuBtnReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleMenuBtnReqValidationError{}

// Validate checks the field values on ListRoleMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRoleMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleMenuReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoleMenuReqMultiError, or nil if none found.
func (m *ListRoleMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetRole()); l < 1 || l > 255 {
		err := ListRoleMenuReqValidationError{
			field:  "Role",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListRoleMenuReqMultiError(errors)
	}

	return nil
}

// ListRoleMenuReqMultiError is an error wrapping multiple validation errors
// returned by ListRoleMenuReq.ValidateAll() if the designated constraints
// aren't met.
type ListRoleMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleMenuReqMultiError) AllErrors() []error { return m }

// ListRoleMenuReqValidationError is the validation error returned by
// ListRoleMenuReq.Validate if the designated constraints aren't met.
type ListRoleMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleMenuReqValidationError) ErrorName() string { return "ListRoleMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e ListRoleMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleMenuReqValidationError{}

// Validate checks the field values on CreateRoleMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleMenuReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleMenuReqMultiError, or nil if none found.
func (m *CreateRoleMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRoleId() <= 0 {
		err := CreateRoleMenuReqValidationError{
			field:  "RoleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetMenuIds()) < 1 {
		err := CreateRoleMenuReqValidationError{
			field:  "MenuIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateRoleMenuReqMultiError(errors)
	}

	return nil
}

// CreateRoleMenuReqMultiError is an error wrapping multiple validation errors
// returned by CreateRoleMenuReq.ValidateAll() if the designated constraints
// aren't met.
type CreateRoleMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleMenuReqMultiError) AllErrors() []error { return m }

// CreateRoleMenuReqValidationError is the validation error returned by
// CreateRoleMenuReq.Validate if the designated constraints aren't met.
type CreateRoleMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleMenuReqValidationError) ErrorName() string {
	return "CreateRoleMenuReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleMenuReqValidationError{}

// Validate checks the field values on GetRoleMenuBtnReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRoleMenuBtnReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleMenuBtnReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoleMenuBtnReqMultiError, or nil if none found.
func (m *GetRoleMenuBtnReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleMenuBtnReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for RoleName

	// no validation rules for MenuId

	if len(errors) > 0 {
		return GetRoleMenuBtnReqMultiError(errors)
	}

	return nil
}

// GetRoleMenuBtnReqMultiError is an error wrapping multiple validation errors
// returned by GetRoleMenuBtnReq.ValidateAll() if the designated constraints
// aren't met.
type GetRoleMenuBtnReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleMenuBtnReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleMenuBtnReqMultiError) AllErrors() []error { return m }

// GetRoleMenuBtnReqValidationError is the validation error returned by
// GetRoleMenuBtnReq.Validate if the designated constraints aren't met.
type GetRoleMenuBtnReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleMenuBtnReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleMenuBtnReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleMenuBtnReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleMenuBtnReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleMenuBtnReqValidationError) ErrorName() string {
	return "GetRoleMenuBtnReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoleMenuBtnReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleMenuBtnReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleMenuBtnReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleMenuBtnReqValidationError{}

// Validate checks the field values on GetRoleMenuBtnRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRoleMenuBtnRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleMenuBtnRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoleMenuBtnRepMultiError, or nil if none found.
func (m *GetRoleMenuBtnRep) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleMenuBtnRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRoleMenuBtnRepValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRoleMenuBtnRepValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRoleMenuBtnRepValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetRoleMenuBtnRepMultiError(errors)
	}

	return nil
}

// GetRoleMenuBtnRepMultiError is an error wrapping multiple validation errors
// returned by GetRoleMenuBtnRep.ValidateAll() if the designated constraints
// aren't met.
type GetRoleMenuBtnRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleMenuBtnRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleMenuBtnRepMultiError) AllErrors() []error { return m }

// GetRoleMenuBtnRepValidationError is the validation error returned by
// GetRoleMenuBtnRep.Validate if the designated constraints aren't met.
type GetRoleMenuBtnRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleMenuBtnRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleMenuBtnRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleMenuBtnRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleMenuBtnRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleMenuBtnRepValidationError) ErrorName() string {
	return "GetRoleMenuBtnRepValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoleMenuBtnRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleMenuBtnRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleMenuBtnRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleMenuBtnRepValidationError{}

// Validate checks the field values on GetApiListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetApiListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApiListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetApiListReqMultiError, or
// nil if none found.
func (m *GetApiListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApiListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := GetApiListReqValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() <= 0 {
		err := GetApiListReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	// no validation rules for Group

	// no validation rules for Method

	// no validation rules for Path

	if len(errors) > 0 {
		return GetApiListReqMultiError(errors)
	}

	return nil
}

// GetApiListReqMultiError is an error wrapping multiple validation errors
// returned by GetApiListReq.ValidateAll() if the designated constraints
// aren't met.
type GetApiListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApiListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApiListReqMultiError) AllErrors() []error { return m }

// GetApiListReqValidationError is the validation error returned by
// GetApiListReq.Validate if the designated constraints aren't met.
type GetApiListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApiListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApiListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApiListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApiListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApiListReqValidationError) ErrorName() string { return "GetApiListReqValidationError" }

// Error satisfies the builtin error interface
func (e GetApiListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApiListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApiListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApiListReqValidationError{}

// Validate checks the field values on GetApiListPageRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetApiListPageRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApiListPageRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetApiListPageRepMultiError, or nil if none found.
func (m *GetApiListPageRep) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApiListPageRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetApiListPageRepValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetApiListPageRepValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetApiListPageRepValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetApiListPageRepMultiError(errors)
	}

	return nil
}

// GetApiListPageRepMultiError is an error wrapping multiple validation errors
// returned by GetApiListPageRep.ValidateAll() if the designated constraints
// aren't met.
type GetApiListPageRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApiListPageRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApiListPageRepMultiError) AllErrors() []error { return m }

// GetApiListPageRepValidationError is the validation error returned by
// GetApiListPageRep.Validate if the designated constraints aren't met.
type GetApiListPageRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApiListPageRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApiListPageRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApiListPageRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApiListPageRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApiListPageRepValidationError) ErrorName() string {
	return "GetApiListPageRepValidationError"
}

// Error satisfies the builtin error interface
func (e GetApiListPageRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApiListPageRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApiListPageRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApiListPageRepValidationError{}

// Validate checks the field values on GetApiListRep with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetApiListRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApiListRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetApiListRepMultiError, or
// nil if none found.
func (m *GetApiListRep) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApiListRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetApiListRepValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetApiListRepValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetApiListRepValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetApiListRepMultiError(errors)
	}

	return nil
}

// GetApiListRepMultiError is an error wrapping multiple validation errors
// returned by GetApiListRep.ValidateAll() if the designated constraints
// aren't met.
type GetApiListRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApiListRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApiListRepMultiError) AllErrors() []error { return m }

// GetApiListRepValidationError is the validation error returned by
// GetApiListRep.Validate if the designated constraints aren't met.
type GetApiListRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApiListRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApiListRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApiListRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApiListRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApiListRepValidationError) ErrorName() string { return "GetApiListRepValidationError" }

// Error satisfies the builtin error interface
func (e GetApiListRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApiListRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApiListRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApiListRepValidationError{}

// Validate checks the field values on UpdateApiReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateApiReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateApiReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateApiReqMultiError, or
// nil if none found.
func (m *UpdateApiReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateApiReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateApiReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := UpdateApiReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetGroup()); l < 1 || l > 255 {
		err := UpdateApiReqValidationError{
			field:  "Group",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetMethod()); l < 1 || l > 255 {
		err := UpdateApiReqValidationError{
			field:  "Method",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPath()); l < 1 || l > 255 {
		err := UpdateApiReqValidationError{
			field:  "Path",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateApiReqMultiError(errors)
	}

	return nil
}

// UpdateApiReqMultiError is an error wrapping multiple validation errors
// returned by UpdateApiReq.ValidateAll() if the designated constraints aren't met.
type UpdateApiReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateApiReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateApiReqMultiError) AllErrors() []error { return m }

// UpdateApiReqValidationError is the validation error returned by
// UpdateApiReq.Validate if the designated constraints aren't met.
type UpdateApiReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApiReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApiReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApiReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApiReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApiReqValidationError) ErrorName() string { return "UpdateApiReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateApiReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApiReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApiReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApiReqValidationError{}

// Validate checks the field values on CreateApiReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateApiReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateApiReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateApiReqMultiError, or
// nil if none found.
func (m *CreateApiReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateApiReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := CreateApiReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetGroup()); l < 1 || l > 255 {
		err := CreateApiReqValidationError{
			field:  "Group",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetMethod()); l < 1 || l > 255 {
		err := CreateApiReqValidationError{
			field:  "Method",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPath()); l < 1 || l > 255 {
		err := CreateApiReqValidationError{
			field:  "Path",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateApiReqMultiError(errors)
	}

	return nil
}

// CreateApiReqMultiError is an error wrapping multiple validation errors
// returned by CreateApiReq.ValidateAll() if the designated constraints aren't met.
type CreateApiReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateApiReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateApiReqMultiError) AllErrors() []error { return m }

// CreateApiReqValidationError is the validation error returned by
// CreateApiReq.Validate if the designated constraints aren't met.
type CreateApiReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateApiReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateApiReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateApiReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateApiReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateApiReqValidationError) ErrorName() string { return "CreateApiReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateApiReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateApiReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateApiReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateApiReqValidationError{}

// Validate checks the field values on DeleteApiReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteApiReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteApiReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteApiReqMultiError, or
// nil if none found.
func (m *DeleteApiReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteApiReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteApiReqMultiError(errors)
	}

	return nil
}

// DeleteApiReqMultiError is an error wrapping multiple validation errors
// returned by DeleteApiReq.ValidateAll() if the designated constraints aren't met.
type DeleteApiReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteApiReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteApiReqMultiError) AllErrors() []error { return m }

// DeleteApiReqValidationError is the validation error returned by
// DeleteApiReq.Validate if the designated constraints aren't met.
type DeleteApiReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApiReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApiReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApiReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApiReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApiReqValidationError) ErrorName() string { return "DeleteApiReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteApiReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApiReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApiReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApiReqValidationError{}

// Validate checks the field values on ApiInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApiInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ApiInfoMultiError, or nil if none found.
func (m *ApiInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Group

	// no validation rules for Method

	// no validation rules for Path

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for Domain

	if len(errors) > 0 {
		return ApiInfoMultiError(errors)
	}

	return nil
}

// ApiInfoMultiError is an error wrapping multiple validation errors returned
// by ApiInfo.ValidateAll() if the designated constraints aren't met.
type ApiInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiInfoMultiError) AllErrors() []error { return m }

// ApiInfoValidationError is the validation error returned by ApiInfo.Validate
// if the designated constraints aren't met.
type ApiInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiInfoValidationError) ErrorName() string { return "ApiInfoValidationError" }

// Error satisfies the builtin error interface
func (e ApiInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiInfoValidationError{}
