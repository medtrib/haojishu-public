// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: auth/v1/auth.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Auth_AddRole_FullMethodName      = "/api.auth.v1.Auth/AddRole"
	Auth_EditRole_FullMethodName     = "/api.auth.v1.Auth/EditRole"
	Auth_DelRole_FullMethodName      = "/api.auth.v1.Auth/DelRole"
	Auth_FullRoleList_FullMethodName = "/api.auth.v1.Auth/FullRoleList"
	Auth_PageRoleList_FullMethodName = "/api.auth.v1.Auth/PageRoleList"
)

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	// 添加角色
	AddRole(ctx context.Context, in *AddRoleReq, opts ...grpc.CallOption) (*AddRoleRep, error)
	// 编辑角色
	EditRole(ctx context.Context, in *EditRoleReq, opts ...grpc.CallOption) (*RoleStatus, error)
	// 删除角色
	DelRole(ctx context.Context, in *DelRoleReq, opts ...grpc.CallOption) (*RoleStatus, error)
	// 获取角色列表(完整)
	FullRoleList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FullRoleListRep, error)
	// 获取角色列表(分页)
	PageRoleList(ctx context.Context, in *PageRoleListReq, opts ...grpc.CallOption) (*PageRoleListRep, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) AddRole(ctx context.Context, in *AddRoleReq, opts ...grpc.CallOption) (*AddRoleRep, error) {
	out := new(AddRoleRep)
	err := c.cc.Invoke(ctx, Auth_AddRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) EditRole(ctx context.Context, in *EditRoleReq, opts ...grpc.CallOption) (*RoleStatus, error) {
	out := new(RoleStatus)
	err := c.cc.Invoke(ctx, Auth_EditRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) DelRole(ctx context.Context, in *DelRoleReq, opts ...grpc.CallOption) (*RoleStatus, error) {
	out := new(RoleStatus)
	err := c.cc.Invoke(ctx, Auth_DelRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) FullRoleList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FullRoleListRep, error) {
	out := new(FullRoleListRep)
	err := c.cc.Invoke(ctx, Auth_FullRoleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) PageRoleList(ctx context.Context, in *PageRoleListReq, opts ...grpc.CallOption) (*PageRoleListRep, error) {
	out := new(PageRoleListRep)
	err := c.cc.Invoke(ctx, Auth_PageRoleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	// 添加角色
	AddRole(context.Context, *AddRoleReq) (*AddRoleRep, error)
	// 编辑角色
	EditRole(context.Context, *EditRoleReq) (*RoleStatus, error)
	// 删除角色
	DelRole(context.Context, *DelRoleReq) (*RoleStatus, error)
	// 获取角色列表(完整)
	FullRoleList(context.Context, *emptypb.Empty) (*FullRoleListRep, error)
	// 获取角色列表(分页)
	PageRoleList(context.Context, *PageRoleListReq) (*PageRoleListRep, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) AddRole(context.Context, *AddRoleReq) (*AddRoleRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRole not implemented")
}
func (UnimplementedAuthServer) EditRole(context.Context, *EditRoleReq) (*RoleStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditRole not implemented")
}
func (UnimplementedAuthServer) DelRole(context.Context, *DelRoleReq) (*RoleStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRole not implemented")
}
func (UnimplementedAuthServer) FullRoleList(context.Context, *emptypb.Empty) (*FullRoleListRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FullRoleList not implemented")
}
func (UnimplementedAuthServer) PageRoleList(context.Context, *PageRoleListReq) (*PageRoleListRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageRoleList not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_AddRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AddRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_AddRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AddRole(ctx, req.(*AddRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_EditRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).EditRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_EditRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).EditRole(ctx, req.(*EditRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_DelRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).DelRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_DelRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).DelRole(ctx, req.(*DelRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_FullRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).FullRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_FullRoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).FullRoleList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_PageRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageRoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).PageRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_PageRoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).PageRoleList(ctx, req.(*PageRoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.auth.v1.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRole",
			Handler:    _Auth_AddRole_Handler,
		},
		{
			MethodName: "EditRole",
			Handler:    _Auth_EditRole_Handler,
		},
		{
			MethodName: "DelRole",
			Handler:    _Auth_DelRole_Handler,
		},
		{
			MethodName: "FullRoleList",
			Handler:    _Auth_FullRoleList_Handler,
		},
		{
			MethodName: "PageRoleList",
			Handler:    _Auth_PageRoleList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/v1/auth.proto",
}
