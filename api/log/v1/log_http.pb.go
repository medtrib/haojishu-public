// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v3.19.4
// source: log/v1/log.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationLogCreateLog = "/api.log.v1.Log/CreateLog"
const OperationLogGetLogList = "/api.log.v1.Log/GetLogList"

type LogHTTPServer interface {
	// CreateLog 创建日志
	CreateLog(context.Context, *CreateLogReq) (*RepStatus, error)
	// GetLogList 获取日志列表
	GetLogList(context.Context, *GetLogListReq) (*GetLogListRep, error)
}

func RegisterLogHTTPServer(s *http.Server, srv LogHTTPServer) {
	r := s.Route("/")
	r.POST("/log/v1/CreateLog", _Log_CreateLog0_HTTP_Handler(srv))
	r.GET("/log/v1/log", _Log_GetLogList0_HTTP_Handler(srv))
}

func _Log_CreateLog0_HTTP_Handler(srv LogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateLogReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLogCreateLog)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateLog(ctx, req.(*CreateLogReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RepStatus)
		return ctx.Result(200, reply)
	}
}

func _Log_GetLogList0_HTTP_Handler(srv LogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetLogListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLogGetLogList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetLogList(ctx, req.(*GetLogListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetLogListRep)
		return ctx.Result(200, reply)
	}
}

type LogHTTPClient interface {
	CreateLog(ctx context.Context, req *CreateLogReq, opts ...http.CallOption) (rsp *RepStatus, err error)
	GetLogList(ctx context.Context, req *GetLogListReq, opts ...http.CallOption) (rsp *GetLogListRep, err error)
}

type LogHTTPClientImpl struct {
	cc *http.Client
}

func NewLogHTTPClient(client *http.Client) LogHTTPClient {
	return &LogHTTPClientImpl{client}
}

func (c *LogHTTPClientImpl) CreateLog(ctx context.Context, in *CreateLogReq, opts ...http.CallOption) (*RepStatus, error) {
	var out RepStatus
	pattern := "/log/v1/CreateLog"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLogCreateLog))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *LogHTTPClientImpl) GetLogList(ctx context.Context, in *GetLogListReq, opts ...http.CallOption) (*GetLogListRep, error) {
	var out GetLogListRep
	pattern := "/log/v1/log"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLogGetLogList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
