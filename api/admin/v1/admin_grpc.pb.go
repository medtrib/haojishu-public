// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: admin/v1/admin.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Admin_CreateAdmin_FullMethodName          = "/api.admin.v1.Admin/CreateAdmin"
	Admin_UpdateAdminIpAndTime_FullMethodName = "/api.admin.v1.Admin/UpdateAdminIpAndTime"
	Admin_UpdateAdmin_FullMethodName          = "/api.admin.v1.Admin/UpdateAdmin"
	Admin_DeleteAdmin_FullMethodName          = "/api.admin.v1.Admin/DeleteAdmin"
	Admin_RecoverAdmin_FullMethodName         = "/api.admin.v1.Admin/RecoverAdmin"
	Admin_AdminStatus_FullMethodName          = "/api.admin.v1.Admin/AdminStatus"
	Admin_VerifyAdminPasswd_FullMethodName    = "/api.admin.v1.Admin/VerifyAdminPasswd"
	Admin_GetAdmin_FullMethodName             = "/api.admin.v1.Admin/GetAdmin"
	Admin_ListAdmin_FullMethodName            = "/api.admin.v1.Admin/ListAdmin"
)

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	// 创建管理员
	CreateAdmin(ctx context.Context, in *CreateAdminReq, opts ...grpc.CallOption) (*AdminInfoRep, error)
	// 更新用户登录时间和IP
	UpdateAdminIpAndTime(ctx context.Context, in *UpdateAdminIpAndTimeReq, opts ...grpc.CallOption) (*RepStatus, error)
	// 编辑管理员
	UpdateAdmin(ctx context.Context, in *UpdateAdminReq, opts ...grpc.CallOption) (*RepStatus, error)
	// 删除管理员
	DeleteAdmin(ctx context.Context, in *DeleteAdminReq, opts ...grpc.CallOption) (*RepStatus, error)
	// 恢复管理员
	RecoverAdmin(ctx context.Context, in *RecoverAdminReq, opts ...grpc.CallOption) (*RepStatus, error)
	// 管理员状态
	AdminStatus(ctx context.Context, in *AdminStatusReq, opts ...grpc.CallOption) (*RepStatus, error)
	// 验证管理员密码
	VerifyAdminPasswd(ctx context.Context, in *VerifyAdminPasswdReq, opts ...grpc.CallOption) (*RepStatus, error)
	// 获取管理员详情
	GetAdmin(ctx context.Context, in *GetAdminReq, opts ...grpc.CallOption) (*AdminInfoRep, error)
	// 获取管理员列表
	ListAdmin(ctx context.Context, in *ListAdminReq, opts ...grpc.CallOption) (*ListAdminRep, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) CreateAdmin(ctx context.Context, in *CreateAdminReq, opts ...grpc.CallOption) (*AdminInfoRep, error) {
	out := new(AdminInfoRep)
	err := c.cc.Invoke(ctx, Admin_CreateAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateAdminIpAndTime(ctx context.Context, in *UpdateAdminIpAndTimeReq, opts ...grpc.CallOption) (*RepStatus, error) {
	out := new(RepStatus)
	err := c.cc.Invoke(ctx, Admin_UpdateAdminIpAndTime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateAdmin(ctx context.Context, in *UpdateAdminReq, opts ...grpc.CallOption) (*RepStatus, error) {
	out := new(RepStatus)
	err := c.cc.Invoke(ctx, Admin_UpdateAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteAdmin(ctx context.Context, in *DeleteAdminReq, opts ...grpc.CallOption) (*RepStatus, error) {
	out := new(RepStatus)
	err := c.cc.Invoke(ctx, Admin_DeleteAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) RecoverAdmin(ctx context.Context, in *RecoverAdminReq, opts ...grpc.CallOption) (*RepStatus, error) {
	out := new(RepStatus)
	err := c.cc.Invoke(ctx, Admin_RecoverAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AdminStatus(ctx context.Context, in *AdminStatusReq, opts ...grpc.CallOption) (*RepStatus, error) {
	out := new(RepStatus)
	err := c.cc.Invoke(ctx, Admin_AdminStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) VerifyAdminPasswd(ctx context.Context, in *VerifyAdminPasswdReq, opts ...grpc.CallOption) (*RepStatus, error) {
	out := new(RepStatus)
	err := c.cc.Invoke(ctx, Admin_VerifyAdminPasswd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetAdmin(ctx context.Context, in *GetAdminReq, opts ...grpc.CallOption) (*AdminInfoRep, error) {
	out := new(AdminInfoRep)
	err := c.cc.Invoke(ctx, Admin_GetAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListAdmin(ctx context.Context, in *ListAdminReq, opts ...grpc.CallOption) (*ListAdminRep, error) {
	out := new(ListAdminRep)
	err := c.cc.Invoke(ctx, Admin_ListAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	// 创建管理员
	CreateAdmin(context.Context, *CreateAdminReq) (*AdminInfoRep, error)
	// 更新用户登录时间和IP
	UpdateAdminIpAndTime(context.Context, *UpdateAdminIpAndTimeReq) (*RepStatus, error)
	// 编辑管理员
	UpdateAdmin(context.Context, *UpdateAdminReq) (*RepStatus, error)
	// 删除管理员
	DeleteAdmin(context.Context, *DeleteAdminReq) (*RepStatus, error)
	// 恢复管理员
	RecoverAdmin(context.Context, *RecoverAdminReq) (*RepStatus, error)
	// 管理员状态
	AdminStatus(context.Context, *AdminStatusReq) (*RepStatus, error)
	// 验证管理员密码
	VerifyAdminPasswd(context.Context, *VerifyAdminPasswdReq) (*RepStatus, error)
	// 获取管理员详情
	GetAdmin(context.Context, *GetAdminReq) (*AdminInfoRep, error)
	// 获取管理员列表
	ListAdmin(context.Context, *ListAdminReq) (*ListAdminRep, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) CreateAdmin(context.Context, *CreateAdminReq) (*AdminInfoRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdmin not implemented")
}
func (UnimplementedAdminServer) UpdateAdminIpAndTime(context.Context, *UpdateAdminIpAndTimeReq) (*RepStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdminIpAndTime not implemented")
}
func (UnimplementedAdminServer) UpdateAdmin(context.Context, *UpdateAdminReq) (*RepStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdmin not implemented")
}
func (UnimplementedAdminServer) DeleteAdmin(context.Context, *DeleteAdminReq) (*RepStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdmin not implemented")
}
func (UnimplementedAdminServer) RecoverAdmin(context.Context, *RecoverAdminReq) (*RepStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverAdmin not implemented")
}
func (UnimplementedAdminServer) AdminStatus(context.Context, *AdminStatusReq) (*RepStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminStatus not implemented")
}
func (UnimplementedAdminServer) VerifyAdminPasswd(context.Context, *VerifyAdminPasswdReq) (*RepStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAdminPasswd not implemented")
}
func (UnimplementedAdminServer) GetAdmin(context.Context, *GetAdminReq) (*AdminInfoRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdmin not implemented")
}
func (UnimplementedAdminServer) ListAdmin(context.Context, *ListAdminReq) (*ListAdminRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdmin not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_CreateAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_CreateAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateAdmin(ctx, req.(*CreateAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateAdminIpAndTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdminIpAndTimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateAdminIpAndTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UpdateAdminIpAndTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateAdminIpAndTime(ctx, req.(*UpdateAdminIpAndTimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UpdateAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateAdmin(ctx, req.(*UpdateAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DeleteAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteAdmin(ctx, req.(*DeleteAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_RecoverAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).RecoverAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_RecoverAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).RecoverAdmin(ctx, req.(*RecoverAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AdminStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AdminStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_AdminStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AdminStatus(ctx, req.(*AdminStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_VerifyAdminPasswd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAdminPasswdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).VerifyAdminPasswd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_VerifyAdminPasswd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).VerifyAdminPasswd(ctx, req.(*VerifyAdminPasswdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetAdmin(ctx, req.(*GetAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ListAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListAdmin(ctx, req.(*ListAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.admin.v1.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAdmin",
			Handler:    _Admin_CreateAdmin_Handler,
		},
		{
			MethodName: "UpdateAdminIpAndTime",
			Handler:    _Admin_UpdateAdminIpAndTime_Handler,
		},
		{
			MethodName: "UpdateAdmin",
			Handler:    _Admin_UpdateAdmin_Handler,
		},
		{
			MethodName: "DeleteAdmin",
			Handler:    _Admin_DeleteAdmin_Handler,
		},
		{
			MethodName: "RecoverAdmin",
			Handler:    _Admin_RecoverAdmin_Handler,
		},
		{
			MethodName: "AdminStatus",
			Handler:    _Admin_AdminStatus_Handler,
		},
		{
			MethodName: "VerifyAdminPasswd",
			Handler:    _Admin_VerifyAdminPasswd_Handler,
		},
		{
			MethodName: "GetAdmin",
			Handler:    _Admin_GetAdmin_Handler,
		},
		{
			MethodName: "ListAdmin",
			Handler:    _Admin_ListAdmin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/v1/admin.proto",
}
