// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v3.19.4
// source: product/v1/product.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationProductCreateKind = "/api.product.v1.Product/CreateKind"
const OperationProductCreateProduct = "/api.product.v1.Product/CreateProduct"
const OperationProductCreateTerminal = "/api.product.v1.Product/CreateTerminal"
const OperationProductDelKind = "/api.product.v1.Product/DelKind"
const OperationProductDelProduct = "/api.product.v1.Product/DelProduct"
const OperationProductDelTerminal = "/api.product.v1.Product/DelTerminal"
const OperationProductEditKind = "/api.product.v1.Product/EditKind"
const OperationProductEditProduct = "/api.product.v1.Product/EditProduct"
const OperationProductEditTerminal = "/api.product.v1.Product/EditTerminal"
const OperationProductGetKind = "/api.product.v1.Product/GetKind"
const OperationProductGetTerminal = "/api.product.v1.Product/GetTerminal"
const OperationProductListKind = "/api.product.v1.Product/ListKind"
const OperationProductListProduct = "/api.product.v1.Product/ListProduct"
const OperationProductListTerminal = "/api.product.v1.Product/ListTerminal"
const OperationProductPageListKind = "/api.product.v1.Product/PageListKind"
const OperationProductPageListTerminal = "/api.product.v1.Product/PageListTerminal"

type ProductHTTPServer interface {
	// CreateKind 创建产品类型
	CreateKind(context.Context, *CreateKindReq) (*ProductStatus, error)
	// CreateProduct 创建产品
	CreateProduct(context.Context, *CreateProductReq) (*ProductStatus, error)
	// CreateTerminal 创建终端
	CreateTerminal(context.Context, *CreateTerminalReq) (*ProductStatus, error)
	// DelKind 删除产品类型
	DelKind(context.Context, *DelIdReq) (*ProductStatus, error)
	// DelProduct 删除产品
	DelProduct(context.Context, *DelIdReq) (*ProductStatus, error)
	// DelTerminal 删除终端
	DelTerminal(context.Context, *DelIdReq) (*ProductStatus, error)
	// EditKind 编辑产品类型
	EditKind(context.Context, *EditKindReq) (*ProductStatus, error)
	// EditProduct 编辑产品
	EditProduct(context.Context, *EditProductReq) (*ProductStatus, error)
	// EditTerminal 编辑终端
	EditTerminal(context.Context, *EditTerminalReq) (*ProductStatus, error)
	// GetKind 查询单条产品类型
	GetKind(context.Context, *Kind) (*Kind, error)
	// GetTerminal 查询单条终端信息
	GetTerminal(context.Context, *Terminal) (*Terminal, error)
	// ListKind 获取产品类型列表
	ListKind(context.Context, *Kind) (*ListKindRep, error)
	// ListProduct 获取产品类型列表
	ListProduct(context.Context, *ProductInfo) (*ListProductRep, error)
	// ListTerminal 获取终端列表
	ListTerminal(context.Context, *Terminal) (*ListTerminalRep, error)
	// PageListKind 分页获取产品类型列表
	PageListKind(context.Context, *PageListKindReq) (*PageListKindRep, error)
	// PageListTerminal 分页获取终端列表
	PageListTerminal(context.Context, *PageListTerminalReq) (*PageListTerminalRep, error)
}

func RegisterProductHTTPServer(s *http.Server, srv ProductHTTPServer) {
	r := s.Route("/")
	r.POST("/product/v1/CreateTerminal", _Product_CreateTerminal0_HTTP_Handler(srv))
	r.PUT("/product/v1/EditTerminal", _Product_EditTerminal0_HTTP_Handler(srv))
	r.DELETE("/product/v1/DelTerminal", _Product_DelTerminal0_HTTP_Handler(srv))
	r.GET("/product/v1/ListTerminal", _Product_ListTerminal0_HTTP_Handler(srv))
	r.GET("/product/v1/PageListTerminal", _Product_PageListTerminal0_HTTP_Handler(srv))
	r.GET("/product/v1/GetTerminal", _Product_GetTerminal0_HTTP_Handler(srv))
	r.POST("/product/v1/GetTerminal", _Product_CreateKind0_HTTP_Handler(srv))
	r.PUT("/product/v1/EditKind", _Product_EditKind0_HTTP_Handler(srv))
	r.DELETE("/product/v1/DelKind", _Product_DelKind0_HTTP_Handler(srv))
	r.GET("/product/v1/ListKind", _Product_ListKind0_HTTP_Handler(srv))
	r.GET("/product/v1/PageListKind", _Product_PageListKind0_HTTP_Handler(srv))
	r.GET("/product/v1/GetKind", _Product_GetKind0_HTTP_Handler(srv))
	r.POST("/product/v1/CreateProduct", _Product_CreateProduct0_HTTP_Handler(srv))
	r.PUT("/product/v1/EditProduct", _Product_EditProduct0_HTTP_Handler(srv))
	r.DELETE("/product/v1/DelProduct", _Product_DelProduct0_HTTP_Handler(srv))
	r.GET("/product/v1/ListProduct", _Product_ListProduct0_HTTP_Handler(srv))
}

func _Product_CreateTerminal0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTerminalReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductCreateTerminal)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTerminal(ctx, req.(*CreateTerminalReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProductStatus)
		return ctx.Result(200, reply)
	}
}

func _Product_EditTerminal0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EditTerminalReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductEditTerminal)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EditTerminal(ctx, req.(*EditTerminalReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProductStatus)
		return ctx.Result(200, reply)
	}
}

func _Product_DelTerminal0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelIdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductDelTerminal)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelTerminal(ctx, req.(*DelIdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProductStatus)
		return ctx.Result(200, reply)
	}
}

func _Product_ListTerminal0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Terminal
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductListTerminal)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTerminal(ctx, req.(*Terminal))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListTerminalRep)
		return ctx.Result(200, reply)
	}
}

func _Product_PageListTerminal0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageListTerminalReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductPageListTerminal)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PageListTerminal(ctx, req.(*PageListTerminalReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageListTerminalRep)
		return ctx.Result(200, reply)
	}
}

func _Product_GetTerminal0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Terminal
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductGetTerminal)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTerminal(ctx, req.(*Terminal))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Terminal)
		return ctx.Result(200, reply)
	}
}

func _Product_CreateKind0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateKindReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductCreateKind)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateKind(ctx, req.(*CreateKindReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProductStatus)
		return ctx.Result(200, reply)
	}
}

func _Product_EditKind0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EditKindReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductEditKind)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EditKind(ctx, req.(*EditKindReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProductStatus)
		return ctx.Result(200, reply)
	}
}

func _Product_DelKind0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelIdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductDelKind)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelKind(ctx, req.(*DelIdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProductStatus)
		return ctx.Result(200, reply)
	}
}

func _Product_ListKind0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Kind
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductListKind)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListKind(ctx, req.(*Kind))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListKindRep)
		return ctx.Result(200, reply)
	}
}

func _Product_PageListKind0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageListKindReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductPageListKind)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PageListKind(ctx, req.(*PageListKindReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageListKindRep)
		return ctx.Result(200, reply)
	}
}

func _Product_GetKind0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Kind
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductGetKind)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetKind(ctx, req.(*Kind))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Kind)
		return ctx.Result(200, reply)
	}
}

func _Product_CreateProduct0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateProductReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductCreateProduct)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateProduct(ctx, req.(*CreateProductReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProductStatus)
		return ctx.Result(200, reply)
	}
}

func _Product_EditProduct0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EditProductReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductEditProduct)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EditProduct(ctx, req.(*EditProductReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProductStatus)
		return ctx.Result(200, reply)
	}
}

func _Product_DelProduct0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelIdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductDelProduct)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelProduct(ctx, req.(*DelIdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProductStatus)
		return ctx.Result(200, reply)
	}
}

func _Product_ListProduct0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ProductInfo
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductListProduct)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListProduct(ctx, req.(*ProductInfo))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListProductRep)
		return ctx.Result(200, reply)
	}
}

type ProductHTTPClient interface {
	CreateKind(ctx context.Context, req *CreateKindReq, opts ...http.CallOption) (rsp *ProductStatus, err error)
	CreateProduct(ctx context.Context, req *CreateProductReq, opts ...http.CallOption) (rsp *ProductStatus, err error)
	CreateTerminal(ctx context.Context, req *CreateTerminalReq, opts ...http.CallOption) (rsp *ProductStatus, err error)
	DelKind(ctx context.Context, req *DelIdReq, opts ...http.CallOption) (rsp *ProductStatus, err error)
	DelProduct(ctx context.Context, req *DelIdReq, opts ...http.CallOption) (rsp *ProductStatus, err error)
	DelTerminal(ctx context.Context, req *DelIdReq, opts ...http.CallOption) (rsp *ProductStatus, err error)
	EditKind(ctx context.Context, req *EditKindReq, opts ...http.CallOption) (rsp *ProductStatus, err error)
	EditProduct(ctx context.Context, req *EditProductReq, opts ...http.CallOption) (rsp *ProductStatus, err error)
	EditTerminal(ctx context.Context, req *EditTerminalReq, opts ...http.CallOption) (rsp *ProductStatus, err error)
	GetKind(ctx context.Context, req *Kind, opts ...http.CallOption) (rsp *Kind, err error)
	GetTerminal(ctx context.Context, req *Terminal, opts ...http.CallOption) (rsp *Terminal, err error)
	ListKind(ctx context.Context, req *Kind, opts ...http.CallOption) (rsp *ListKindRep, err error)
	ListProduct(ctx context.Context, req *ProductInfo, opts ...http.CallOption) (rsp *ListProductRep, err error)
	ListTerminal(ctx context.Context, req *Terminal, opts ...http.CallOption) (rsp *ListTerminalRep, err error)
	PageListKind(ctx context.Context, req *PageListKindReq, opts ...http.CallOption) (rsp *PageListKindRep, err error)
	PageListTerminal(ctx context.Context, req *PageListTerminalReq, opts ...http.CallOption) (rsp *PageListTerminalRep, err error)
}

type ProductHTTPClientImpl struct {
	cc *http.Client
}

func NewProductHTTPClient(client *http.Client) ProductHTTPClient {
	return &ProductHTTPClientImpl{client}
}

func (c *ProductHTTPClientImpl) CreateKind(ctx context.Context, in *CreateKindReq, opts ...http.CallOption) (*ProductStatus, error) {
	var out ProductStatus
	pattern := "/product/v1/GetTerminal"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProductCreateKind))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) CreateProduct(ctx context.Context, in *CreateProductReq, opts ...http.CallOption) (*ProductStatus, error) {
	var out ProductStatus
	pattern := "/product/v1/CreateProduct"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProductCreateProduct))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) CreateTerminal(ctx context.Context, in *CreateTerminalReq, opts ...http.CallOption) (*ProductStatus, error) {
	var out ProductStatus
	pattern := "/product/v1/CreateTerminal"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProductCreateTerminal))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) DelKind(ctx context.Context, in *DelIdReq, opts ...http.CallOption) (*ProductStatus, error) {
	var out ProductStatus
	pattern := "/product/v1/DelKind"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductDelKind))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) DelProduct(ctx context.Context, in *DelIdReq, opts ...http.CallOption) (*ProductStatus, error) {
	var out ProductStatus
	pattern := "/product/v1/DelProduct"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductDelProduct))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) DelTerminal(ctx context.Context, in *DelIdReq, opts ...http.CallOption) (*ProductStatus, error) {
	var out ProductStatus
	pattern := "/product/v1/DelTerminal"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductDelTerminal))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) EditKind(ctx context.Context, in *EditKindReq, opts ...http.CallOption) (*ProductStatus, error) {
	var out ProductStatus
	pattern := "/product/v1/EditKind"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProductEditKind))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) EditProduct(ctx context.Context, in *EditProductReq, opts ...http.CallOption) (*ProductStatus, error) {
	var out ProductStatus
	pattern := "/product/v1/EditProduct"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProductEditProduct))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) EditTerminal(ctx context.Context, in *EditTerminalReq, opts ...http.CallOption) (*ProductStatus, error) {
	var out ProductStatus
	pattern := "/product/v1/EditTerminal"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProductEditTerminal))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) GetKind(ctx context.Context, in *Kind, opts ...http.CallOption) (*Kind, error) {
	var out Kind
	pattern := "/product/v1/GetKind"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductGetKind))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) GetTerminal(ctx context.Context, in *Terminal, opts ...http.CallOption) (*Terminal, error) {
	var out Terminal
	pattern := "/product/v1/GetTerminal"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductGetTerminal))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) ListKind(ctx context.Context, in *Kind, opts ...http.CallOption) (*ListKindRep, error) {
	var out ListKindRep
	pattern := "/product/v1/ListKind"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductListKind))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) ListProduct(ctx context.Context, in *ProductInfo, opts ...http.CallOption) (*ListProductRep, error) {
	var out ListProductRep
	pattern := "/product/v1/ListProduct"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductListProduct))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) ListTerminal(ctx context.Context, in *Terminal, opts ...http.CallOption) (*ListTerminalRep, error) {
	var out ListTerminalRep
	pattern := "/product/v1/ListTerminal"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductListTerminal))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) PageListKind(ctx context.Context, in *PageListKindReq, opts ...http.CallOption) (*PageListKindRep, error) {
	var out PageListKindRep
	pattern := "/product/v1/PageListKind"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductPageListKind))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) PageListTerminal(ctx context.Context, in *PageListTerminalReq, opts ...http.CallOption) (*PageListTerminalRep, error) {
	var out PageListTerminalRep
	pattern := "/product/v1/PageListTerminal"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductPageListTerminal))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
