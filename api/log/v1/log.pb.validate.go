// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/log/v1/log.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateLogReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateLogReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLogReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateLogReqMultiError, or
// nil if none found.
func (m *CreateLogReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLogReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	// no validation rules for TraceId

	// no validation rules for Component

	// no validation rules for Name

	// no validation rules for Latency

	// no validation rules for UserId

	// no validation rules for Method

	// no validation rules for Path

	// no validation rules for Request

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Ip

	// no validation rules for CreatedAt

	// no validation rules for Operation

	// no validation rules for Username

	// no validation rules for Role

	if len(errors) > 0 {
		return CreateLogReqMultiError(errors)
	}

	return nil
}

// CreateLogReqMultiError is an error wrapping multiple validation errors
// returned by CreateLogReq.ValidateAll() if the designated constraints aren't met.
type CreateLogReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLogReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLogReqMultiError) AllErrors() []error { return m }

// CreateLogReqValidationError is the validation error returned by
// CreateLogReq.Validate if the designated constraints aren't met.
type CreateLogReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLogReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLogReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLogReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLogReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLogReqValidationError) ErrorName() string { return "CreateLogReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateLogReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLogReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLogReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLogReqValidationError{}

// Validate checks the field values on RepStatus with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RepStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RepStatusMultiError, or nil
// if none found.
func (m *RepStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *RepStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return RepStatusMultiError(errors)
	}

	return nil
}

// RepStatusMultiError is an error wrapping multiple validation errors returned
// by RepStatus.ValidateAll() if the designated constraints aren't met.
type RepStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RepStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RepStatusMultiError) AllErrors() []error { return m }

// RepStatusValidationError is the validation error returned by
// RepStatus.Validate if the designated constraints aren't met.
type RepStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepStatusValidationError) ErrorName() string { return "RepStatusValidationError" }

// Error satisfies the builtin error interface
func (e RepStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepStatusValidationError{}

// Validate checks the field values on LogInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LogInfoMultiError, or nil if none found.
func (m *LogInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *LogInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TraceId

	// no validation rules for Component

	// no validation rules for Operation

	// no validation rules for UserId

	// no validation rules for Method

	// no validation rules for Path

	// no validation rules for Request

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Ip

	// no validation rules for CreatedAt

	// no validation rules for Name

	// no validation rules for Latency

	// no validation rules for Username

	// no validation rules for Role

	if len(errors) > 0 {
		return LogInfoMultiError(errors)
	}

	return nil
}

// LogInfoMultiError is an error wrapping multiple validation errors returned
// by LogInfo.ValidateAll() if the designated constraints aren't met.
type LogInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogInfoMultiError) AllErrors() []error { return m }

// LogInfoValidationError is the validation error returned by LogInfo.Validate
// if the designated constraints aren't met.
type LogInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogInfoValidationError) ErrorName() string { return "LogInfoValidationError" }

// Error satisfies the builtin error interface
func (e LogInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogInfoValidationError{}

// Validate checks the field values on GetLogListRep with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetLogListRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLogListRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetLogListRepMultiError, or
// nil if none found.
func (m *GetLogListRep) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLogListRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetLogListRepValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetLogListRepValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetLogListRepValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetLogListRepMultiError(errors)
	}

	return nil
}

// GetLogListRepMultiError is an error wrapping multiple validation errors
// returned by GetLogListRep.ValidateAll() if the designated constraints
// aren't met.
type GetLogListRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLogListRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLogListRepMultiError) AllErrors() []error { return m }

// GetLogListRepValidationError is the validation error returned by
// GetLogListRep.Validate if the designated constraints aren't met.
type GetLogListRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLogListRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLogListRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLogListRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLogListRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLogListRepValidationError) ErrorName() string { return "GetLogListRepValidationError" }

// Error satisfies the builtin error interface
func (e GetLogListRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLogListRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLogListRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLogListRepValidationError{}

// Validate checks the field values on GetLogListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetLogListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLogListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetLogListReqMultiError, or
// nil if none found.
func (m *GetLogListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLogListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := GetLogListReqValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() <= 0 {
		err := GetLogListReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	// no validation rules for UserId

	// no validation rules for Username

	// no validation rules for Role

	// no validation rules for Operation

	// no validation rules for Ip

	// no validation rules for TraceId

	if len(errors) > 0 {
		return GetLogListReqMultiError(errors)
	}

	return nil
}

// GetLogListReqMultiError is an error wrapping multiple validation errors
// returned by GetLogListReq.ValidateAll() if the designated constraints
// aren't met.
type GetLogListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLogListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLogListReqMultiError) AllErrors() []error { return m }

// GetLogListReqValidationError is the validation error returned by
// GetLogListReq.Validate if the designated constraints aren't met.
type GetLogListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLogListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLogListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLogListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLogListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLogListReqValidationError) ErrorName() string { return "GetLogListReqValidationError" }

// Error satisfies the builtin error interface
func (e GetLogListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLogListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLogListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLogListReqValidationError{}
