// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v3.19.4
// source: auth/v1/auth.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAuthAddRole = "/api.auth.v1.Auth/AddRole"
const OperationAuthDelRole = "/api.auth.v1.Auth/DelRole"
const OperationAuthEditRole = "/api.auth.v1.Auth/EditRole"
const OperationAuthFullRoleList = "/api.auth.v1.Auth/FullRoleList"
const OperationAuthPageRoleList = "/api.auth.v1.Auth/PageRoleList"

type AuthHTTPServer interface {
	// AddRole 添加角色
	AddRole(context.Context, *AddRoleReq) (*AddRoleRep, error)
	// DelRole 删除角色
	DelRole(context.Context, *DelRoleReq) (*RoleStatus, error)
	// EditRole 编辑角色
	EditRole(context.Context, *EditRoleReq) (*RoleStatus, error)
	// FullRoleList 获取角色列表(完整)
	FullRoleList(context.Context, *emptypb.Empty) (*FullRoleListRep, error)
	// PageRoleList 获取角色列表(分页)
	PageRoleList(context.Context, *PageRoleListReq) (*PageRoleListRep, error)
}

func RegisterAuthHTTPServer(s *http.Server, srv AuthHTTPServer) {
	r := s.Route("/")
	r.POST("/auth/v1/AddRole", _Auth_AddRole0_HTTP_Handler(srv))
	r.PUT("/auth/v1/EditRole", _Auth_EditRole0_HTTP_Handler(srv))
	r.DELETE("/auth/v1/DelRole", _Auth_DelRole0_HTTP_Handler(srv))
	r.GET("/auth/v1/FullRoleList", _Auth_FullRoleList0_HTTP_Handler(srv))
	r.GET("/auth/v1/PageRoleList", _Auth_PageRoleList0_HTTP_Handler(srv))
}

func _Auth_AddRole0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddRoleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthAddRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddRole(ctx, req.(*AddRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddRoleRep)
		return ctx.Result(200, reply)
	}
}

func _Auth_EditRole0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EditRoleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthEditRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EditRole(ctx, req.(*EditRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RoleStatus)
		return ctx.Result(200, reply)
	}
}

func _Auth_DelRole0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelRoleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthDelRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelRole(ctx, req.(*DelRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RoleStatus)
		return ctx.Result(200, reply)
	}
}

func _Auth_FullRoleList0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthFullRoleList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FullRoleList(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FullRoleListRep)
		return ctx.Result(200, reply)
	}
}

func _Auth_PageRoleList0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageRoleListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthPageRoleList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PageRoleList(ctx, req.(*PageRoleListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageRoleListRep)
		return ctx.Result(200, reply)
	}
}

type AuthHTTPClient interface {
	AddRole(ctx context.Context, req *AddRoleReq, opts ...http.CallOption) (rsp *AddRoleRep, err error)
	DelRole(ctx context.Context, req *DelRoleReq, opts ...http.CallOption) (rsp *RoleStatus, err error)
	EditRole(ctx context.Context, req *EditRoleReq, opts ...http.CallOption) (rsp *RoleStatus, err error)
	FullRoleList(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *FullRoleListRep, err error)
	PageRoleList(ctx context.Context, req *PageRoleListReq, opts ...http.CallOption) (rsp *PageRoleListRep, err error)
}

type AuthHTTPClientImpl struct {
	cc *http.Client
}

func NewAuthHTTPClient(client *http.Client) AuthHTTPClient {
	return &AuthHTTPClientImpl{client}
}

func (c *AuthHTTPClientImpl) AddRole(ctx context.Context, in *AddRoleReq, opts ...http.CallOption) (*AddRoleRep, error) {
	var out AddRoleRep
	pattern := "/auth/v1/AddRole"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthAddRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) DelRole(ctx context.Context, in *DelRoleReq, opts ...http.CallOption) (*RoleStatus, error) {
	var out RoleStatus
	pattern := "/auth/v1/DelRole"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthDelRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) EditRole(ctx context.Context, in *EditRoleReq, opts ...http.CallOption) (*RoleStatus, error) {
	var out RoleStatus
	pattern := "/auth/v1/EditRole"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthEditRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) FullRoleList(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*FullRoleListRep, error) {
	var out FullRoleListRep
	pattern := "/auth/v1/FullRoleList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthFullRoleList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) PageRoleList(ctx context.Context, in *PageRoleListReq, opts ...http.CallOption) (*PageRoleListRep, error) {
	var out PageRoleListRep
	pattern := "/auth/v1/PageRoleList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthPageRoleList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
