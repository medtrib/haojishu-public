// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/admin/v1/admin.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateAdminReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateAdminReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAdminReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateAdminReqMultiError,
// or nil if none found.
func (m *CreateAdminReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAdminReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUsername()); l < 4 || l > 20 {
		err := CreateAdminReqValidationError{
			field:  "Username",
			reason: "value length must be between 4 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateAdminReq_Username_Pattern.MatchString(m.GetUsername()) {
		err := CreateAdminReqValidationError{
			field:  "Username",
			reason: "value does not match regex pattern \"^[a-zA-Z][a-zA-Z0-9_]{3,15}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = CreateAdminReqValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 6 {
		err := CreateAdminReqValidationError{
			field:  "Password",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateAdminReq_Mobile_Pattern.MatchString(m.GetMobile()) {
		err := CreateAdminReqValidationError{
			field:  "Mobile",
			reason: "value does not match regex pattern \"^1[0-9]{10}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetNickname()); l < 1 || l > 20 {
		err := CreateAdminReqValidationError{
			field:  "Nickname",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetAvatar()); l < 1 || l > 255 {
		err := CreateAdminReqValidationError{
			field:  "Avatar",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if l := utf8.RuneCountInString(m.GetRole()); l < 1 || l > 255 {
		err := CreateAdminReqValidationError{
			field:  "Role",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateAdminReqMultiError(errors)
	}

	return nil
}

func (m *CreateAdminReq) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CreateAdminReq) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// CreateAdminReqMultiError is an error wrapping multiple validation errors
// returned by CreateAdminReq.ValidateAll() if the designated constraints
// aren't met.
type CreateAdminReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAdminReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAdminReqMultiError) AllErrors() []error { return m }

// CreateAdminReqValidationError is the validation error returned by
// CreateAdminReq.Validate if the designated constraints aren't met.
type CreateAdminReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAdminReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAdminReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAdminReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAdminReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAdminReqValidationError) ErrorName() string { return "CreateAdminReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateAdminReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAdminReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAdminReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAdminReqValidationError{}

var _CreateAdminReq_Username_Pattern = regexp.MustCompile("^[a-zA-Z][a-zA-Z0-9_]{3,15}$")

var _CreateAdminReq_Mobile_Pattern = regexp.MustCompile("^1[0-9]{10}$")

// Validate checks the field values on AdminInfoRep with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdminInfoRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminInfoRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AdminInfoRepMultiError, or
// nil if none found.
func (m *AdminInfoRep) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminInfoRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Mobile

	// no validation rules for Nickname

	// no validation rules for Avatar

	// no validation rules for Status

	// no validation rules for Role

	// no validation rules for LastLoginTime

	// no validation rules for LastLoginIp

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return AdminInfoRepMultiError(errors)
	}

	return nil
}

// AdminInfoRepMultiError is an error wrapping multiple validation errors
// returned by AdminInfoRep.ValidateAll() if the designated constraints aren't met.
type AdminInfoRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminInfoRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminInfoRepMultiError) AllErrors() []error { return m }

// AdminInfoRepValidationError is the validation error returned by
// AdminInfoRep.Validate if the designated constraints aren't met.
type AdminInfoRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminInfoRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminInfoRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminInfoRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminInfoRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminInfoRepValidationError) ErrorName() string { return "AdminInfoRepValidationError" }

// Error satisfies the builtin error interface
func (e AdminInfoRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminInfoRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminInfoRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminInfoRepValidationError{}

// Validate checks the field values on UpdateAdminReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateAdminReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAdminReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateAdminReqMultiError,
// or nil if none found.
func (m *UpdateAdminReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAdminReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateAdminReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUsername()); l < 5 || l > 20 {
		err := UpdateAdminReqValidationError{
			field:  "Username",
			reason: "value length must be between 5 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateAdminReq_Username_Pattern.MatchString(m.GetUsername()) {
		err := UpdateAdminReqValidationError{
			field:  "Username",
			reason: "value does not match regex pattern \"^[a-zA-Z][a-zA-Z0-9_]{3,15}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 6 {
		err := UpdateAdminReqValidationError{
			field:  "Password",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateAdminReq_Mobile_Pattern.MatchString(m.GetMobile()) {
		err := UpdateAdminReqValidationError{
			field:  "Mobile",
			reason: "value does not match regex pattern \"^1[0-9]{10}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetNickname()); l < 1 || l > 20 {
		err := UpdateAdminReqValidationError{
			field:  "Nickname",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetAvatar()); l < 1 || l > 255 {
		err := UpdateAdminReqValidationError{
			field:  "Avatar",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if l := utf8.RuneCountInString(m.GetRole()); l < 1 || l > 255 {
		err := UpdateAdminReqValidationError{
			field:  "Role",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateAdminReqMultiError(errors)
	}

	return nil
}

// UpdateAdminReqMultiError is an error wrapping multiple validation errors
// returned by UpdateAdminReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateAdminReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAdminReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAdminReqMultiError) AllErrors() []error { return m }

// UpdateAdminReqValidationError is the validation error returned by
// UpdateAdminReq.Validate if the designated constraints aren't met.
type UpdateAdminReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAdminReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAdminReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAdminReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAdminReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAdminReqValidationError) ErrorName() string { return "UpdateAdminReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateAdminReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAdminReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAdminReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAdminReqValidationError{}

var _UpdateAdminReq_Username_Pattern = regexp.MustCompile("^[a-zA-Z][a-zA-Z0-9_]{3,15}$")

var _UpdateAdminReq_Mobile_Pattern = regexp.MustCompile("^1[0-9]{10}$")

// Validate checks the field values on RepStatus with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RepStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RepStatusMultiError, or nil
// if none found.
func (m *RepStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *RepStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return RepStatusMultiError(errors)
	}

	return nil
}

// RepStatusMultiError is an error wrapping multiple validation errors returned
// by RepStatus.ValidateAll() if the designated constraints aren't met.
type RepStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RepStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RepStatusMultiError) AllErrors() []error { return m }

// RepStatusValidationError is the validation error returned by
// RepStatus.Validate if the designated constraints aren't met.
type RepStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepStatusValidationError) ErrorName() string { return "RepStatusValidationError" }

// Error satisfies the builtin error interface
func (e RepStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepStatusValidationError{}

// Validate checks the field values on DeleteAdminReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteAdminReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAdminReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteAdminReqMultiError,
// or nil if none found.
func (m *DeleteAdminReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAdminReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteAdminReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteAdminReqMultiError(errors)
	}

	return nil
}

// DeleteAdminReqMultiError is an error wrapping multiple validation errors
// returned by DeleteAdminReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteAdminReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAdminReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAdminReqMultiError) AllErrors() []error { return m }

// DeleteAdminReqValidationError is the validation error returned by
// DeleteAdminReq.Validate if the designated constraints aren't met.
type DeleteAdminReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAdminReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAdminReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAdminReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAdminReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAdminReqValidationError) ErrorName() string { return "DeleteAdminReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteAdminReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAdminReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAdminReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAdminReqValidationError{}

// Validate checks the field values on RecoverAdminReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RecoverAdminReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecoverAdminReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecoverAdminReqMultiError, or nil if none found.
func (m *RecoverAdminReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RecoverAdminReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := RecoverAdminReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RecoverAdminReqMultiError(errors)
	}

	return nil
}

// RecoverAdminReqMultiError is an error wrapping multiple validation errors
// returned by RecoverAdminReq.ValidateAll() if the designated constraints
// aren't met.
type RecoverAdminReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecoverAdminReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecoverAdminReqMultiError) AllErrors() []error { return m }

// RecoverAdminReqValidationError is the validation error returned by
// RecoverAdminReq.Validate if the designated constraints aren't met.
type RecoverAdminReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecoverAdminReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecoverAdminReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecoverAdminReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecoverAdminReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecoverAdminReqValidationError) ErrorName() string { return "RecoverAdminReqValidationError" }

// Error satisfies the builtin error interface
func (e RecoverAdminReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecoverAdminReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecoverAdminReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecoverAdminReqValidationError{}

// Validate checks the field values on AdminStatusReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdminStatusReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminStatusReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AdminStatusReqMultiError,
// or nil if none found.
func (m *AdminStatusReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminStatusReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := AdminStatusReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return AdminStatusReqMultiError(errors)
	}

	return nil
}

// AdminStatusReqMultiError is an error wrapping multiple validation errors
// returned by AdminStatusReq.ValidateAll() if the designated constraints
// aren't met.
type AdminStatusReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminStatusReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminStatusReqMultiError) AllErrors() []error { return m }

// AdminStatusReqValidationError is the validation error returned by
// AdminStatusReq.Validate if the designated constraints aren't met.
type AdminStatusReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminStatusReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminStatusReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminStatusReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminStatusReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminStatusReqValidationError) ErrorName() string { return "AdminStatusReqValidationError" }

// Error satisfies the builtin error interface
func (e AdminStatusReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminStatusReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminStatusReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminStatusReqValidationError{}

// Validate checks the field values on VerifyAdminPasswdReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyAdminPasswdReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyAdminPasswdReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyAdminPasswdReqMultiError, or nil if none found.
func (m *VerifyAdminPasswdReq) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyAdminPasswdReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := VerifyAdminPasswdReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 6 {
		err := VerifyAdminPasswdReqValidationError{
			field:  "Password",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return VerifyAdminPasswdReqMultiError(errors)
	}

	return nil
}

// VerifyAdminPasswdReqMultiError is an error wrapping multiple validation
// errors returned by VerifyAdminPasswdReq.ValidateAll() if the designated
// constraints aren't met.
type VerifyAdminPasswdReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyAdminPasswdReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyAdminPasswdReqMultiError) AllErrors() []error { return m }

// VerifyAdminPasswdReqValidationError is the validation error returned by
// VerifyAdminPasswdReq.Validate if the designated constraints aren't met.
type VerifyAdminPasswdReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyAdminPasswdReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyAdminPasswdReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyAdminPasswdReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyAdminPasswdReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyAdminPasswdReqValidationError) ErrorName() string {
	return "VerifyAdminPasswdReqValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyAdminPasswdReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyAdminPasswdReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyAdminPasswdReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyAdminPasswdReqValidationError{}

// Validate checks the field values on GetAdminReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAdminReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAdminReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAdminReqMultiError, or
// nil if none found.
func (m *GetAdminReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAdminReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Mobile

	// no validation rules for Role

	if len(errors) > 0 {
		return GetAdminReqMultiError(errors)
	}

	return nil
}

// GetAdminReqMultiError is an error wrapping multiple validation errors
// returned by GetAdminReq.ValidateAll() if the designated constraints aren't met.
type GetAdminReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAdminReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAdminReqMultiError) AllErrors() []error { return m }

// GetAdminReqValidationError is the validation error returned by
// GetAdminReq.Validate if the designated constraints aren't met.
type GetAdminReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAdminReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAdminReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAdminReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAdminReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAdminReqValidationError) ErrorName() string { return "GetAdminReqValidationError" }

// Error satisfies the builtin error interface
func (e GetAdminReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAdminReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAdminReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAdminReqValidationError{}

// Validate checks the field values on ListAdminReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListAdminReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAdminReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListAdminReqMultiError, or
// nil if none found.
func (m *ListAdminReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAdminReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := ListAdminReqValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() <= 0 {
		err := ListAdminReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Username

	// no validation rules for Mobile

	// no validation rules for Nickname

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAdminReqValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAdminReqValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAdminReqValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAtStart

	// no validation rules for CreatedAtEnd

	if len(errors) > 0 {
		return ListAdminReqMultiError(errors)
	}

	return nil
}

// ListAdminReqMultiError is an error wrapping multiple validation errors
// returned by ListAdminReq.ValidateAll() if the designated constraints aren't met.
type ListAdminReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAdminReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAdminReqMultiError) AllErrors() []error { return m }

// ListAdminReqValidationError is the validation error returned by
// ListAdminReq.Validate if the designated constraints aren't met.
type ListAdminReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAdminReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAdminReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAdminReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAdminReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAdminReqValidationError) ErrorName() string { return "ListAdminReqValidationError" }

// Error satisfies the builtin error interface
func (e ListAdminReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAdminReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAdminReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAdminReqValidationError{}

// Validate checks the field values on ListAdminRep with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListAdminRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAdminRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListAdminRepMultiError, or
// nil if none found.
func (m *ListAdminRep) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAdminRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAdminRepValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAdminRepValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAdminRepValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAdminRepMultiError(errors)
	}

	return nil
}

// ListAdminRepMultiError is an error wrapping multiple validation errors
// returned by ListAdminRep.ValidateAll() if the designated constraints aren't met.
type ListAdminRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAdminRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAdminRepMultiError) AllErrors() []error { return m }

// ListAdminRepValidationError is the validation error returned by
// ListAdminRep.Validate if the designated constraints aren't met.
type ListAdminRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAdminRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAdminRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAdminRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAdminRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAdminRepValidationError) ErrorName() string { return "ListAdminRepValidationError" }

// Error satisfies the builtin error interface
func (e ListAdminRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAdminRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAdminRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAdminRepValidationError{}
